# SecureAI DeepFake Detection System
# Enterprise Integration Test Configuration

# Test environment configurations
environments:
  staging:
    base_url: "https://staging-api.secureai.com"
    database_url: "postgresql://staging:password@staging-db:5432/secureai_staging"
    redis_url: "redis://staging-redis:6379"
    timeout: 30
  
  production:
    base_url: "https://api.secureai.com"
    database_url: "postgresql://prod:password@prod-db:5432/secureai_production"
    redis_url: "redis://prod-redis:6379"
    timeout: 30

# External service configurations for testing
external_services:
  # SIEM Platforms
  splunk:
    base_url: "https://staging-splunk.company.com:8089"
    username: "test_user"
    password: "test_password"
    index: "secureai_test"
    verify_ssl: false
  
  qradar:
    base_url: "https://staging-qradar.company.com"
    token: "test_token_here"
    verify_ssl: false
  
  arcsight:
    base_url: "https://staging-arcsight.company.com:8443"
    username: "test_user"
    password: "test_password"
    verify_ssl: false
  
  # SOAR Platforms
  phantom:
    base_url: "https://staging-phantom.company.com"
    username: "test_user"
    password: "test_password"
    verify_ssl: false
  
  demisto:
    base_url: "https://staging-demisto.company.com"
    api_key: "test_api_key_here"
    verify_ssl: false
  
  sentinel:
    tenant_id: "test_tenant_id"
    client_id: "test_client_id"
    client_secret: "test_client_secret"
    workspace_id: "test_workspace_id"
  
  # Identity Providers
  active_directory:
    server: "ldap://staging-dc.company.com:389"
    base_dn: "DC=company,DC=com"
    bind_dn: "CN=test_user,OU=Service Accounts,DC=company,DC=com"
    bind_password: "test_password"
    user_search_base: "OU=Test Users,DC=company,DC=com"
    verify_ssl: false
  
  okta:
    domain: "staging-company.okta.com"
    client_id: "test_client_id"
    client_secret: "test_client_secret"
    redirect_uri: "https://staging-secureai.company.com/auth/okta/callback"
  
  ping_identity:
    base_url: "https://staging-ping.company.com"
    client_id: "test_client_id"
    client_secret: "test_client_secret"
    verify_ssl: false
  
  # Enterprise APIs
  servicenow:
    instance: "staging-company.service-now.com"
    username: "test_user"
    password: "test_password"
    verify_ssl: false
  
  microsoft_teams:
    webhook_url: "https://outlook.office.com/webhook/test_webhook_url"
    bot_app_id: "test_bot_app_id"
    bot_app_password: "test_bot_password"
  
  slack:
    webhook_url: "https://hooks.slack.com/services/test/slack/webhook"
    bot_token: "xoxb-test-bot-token"
    app_token: "xapp-test-app-token"

# Test data
test_data:
  test_videos:
    - url: "https://test-storage.company.com/videos/real_video.mp4"
      expected_result: false
      description: "Real video for testing false positive rate"
      hash: "sha256:real_video_hash"
    
    - url: "https://test-storage.company.com/videos/deepfake_video.mp4"
      expected_result: true
      description: "Known deepfake for testing detection accuracy"
      hash: "sha256:deepfake_video_hash"
    
    - url: "https://test-storage.company.com/videos/borderline_video.mp4"
      expected_result: true
      description: "Borderline case for testing confidence thresholds"
      hash: "sha256:borderline_video_hash"
  
  test_users:
    - username: "security_user"
      password: "test_password"
      expected_role: "security_professional"
      email: "security.user@company.com"
      groups: ["Security Team"]
    
    - username: "compliance_user"
      password: "test_password"
      expected_role: "compliance_officer"
      email: "compliance.user@company.com"
      groups: ["Compliance Team"]
    
    - username: "content_moderator"
      password: "test_password"
      expected_role: "content_moderator"
      email: "content.moderator@company.com"
      groups: ["Content Moderation Team"]
    
    - username: "admin_user"
      password: "test_password"
      expected_role: "admin"
      email: "admin.user@company.com"
      groups: ["IT Admins"]

# Test categories and configurations
test_categories:
  siem_integrations:
    splunk_basic_integration:
      type: "siem_integration"
      siem_type: "splunk"
      config: "${external_services.splunk}"
      test_events:
        - event_type: "deepfake_detected"
          confidence: 0.95
          risk_level: "high"
          expected_forward: true
        
        - event_type: "system_alert"
          alert_type: "high_detection_rate"
          severity: "medium"
          expected_forward: true
    
    qradar_basic_integration:
      type: "siem_integration"
      siem_type: "qradar"
      config: "${external_services.qradar}"
      test_events:
        - event_type: "deepfake_detected"
          confidence: 0.87
          risk_level: "medium"
          expected_offense: true
    
    arcsight_basic_integration:
      type: "siem_integration"
      siem_type: "arcsight"
      config: "${external_services.arcsight}"
      test_events:
        - event_type: "deepfake_detected"
          confidence: 0.92
          risk_level: "high"
          expected_forward: true

  soar_integrations:
    phantom_basic_integration:
      type: "soar_integration"
      soar_type: "phantom"
      config: "${external_services.phantom}"
      test_playbooks:
        - playbook_id: "deepfake_incident_response"
          parameters:
            video_url: "https://test-storage.company.com/videos/test_video.mp4"
            analysis_type: "comprehensive"
          expected_result: "success"
        
        - playbook_id: "quarantine_suspicious_content"
          parameters:
            video_id: "test_video_123"
            reason: "High confidence deepfake detection"
          expected_result: "success"
    
    demisto_basic_integration:
      type: "soar_integration"
      soar_type: "demisto"
      config: "${external_services.demisto}"
      test_playbooks:
        - playbook_id: "deepfake_analysis_workflow"
          parameters:
            video_url: "https://test-storage.company.com/videos/test_video.mp4"
          expected_result: "success"
    
    sentinel_basic_integration:
      type: "soar_integration"
      soar_type: "sentinel"
      config: "${external_services.sentinel}"
      test_playbooks:
        - playbook_id: "deepfake_threat_response"
          parameters:
            incident_id: "test_incident_123"
            video_hash: "test_video_hash"
          expected_result: "success"

  identity_providers:
    active_directory_integration:
      type: "identity_provider"
      provider_type: "active_directory"
      config: "${external_services.active_directory}"
      test_scenarios:
        - username: "security_user"
          password: "test_password"
          expected_authentication: true
          expected_groups: ["Security Team"]
          expected_role_mapping: "security_professional"
        
        - username: "invalid_user"
          password: "invalid_password"
          expected_authentication: false
        
        - username: "compliance_user"
          password: "test_password"
          expected_authentication: true
          expected_groups: ["Compliance Team"]
          expected_role_mapping: "compliance_officer"
    
    okta_integration:
      type: "identity_provider"
      provider_type: "okta"
      config: "${external_services.okta}"
      test_scenarios:
        - username: "security.user@company.com"
          password: "test_password"
          expected_authentication: true
          expected_groups: ["Security Team"]
          expected_role_mapping: "security_professional"
        
        - username: "invalid.user@company.com"
          password: "invalid_password"
          expected_authentication: false
    
    ping_identity_integration:
      type: "identity_provider"
      provider_type: "ping"
      config: "${external_services.ping_identity}"
      test_scenarios:
        - username: "admin_user"
          password: "test_password"
          expected_authentication: true
          expected_groups: ["IT Admins"]
          expected_role_mapping: "admin"

  enterprise_apis:
    servicenow_integration:
      type: "enterprise_api"
      api_type: "servicenow"
      config: "${external_services.servicenow}"
      test_scenarios:
        - scenario: "incident_creation"
          incident_data:
            short_description: "Test deepfake incident from integration test"
            description: "This is a test incident created during integration testing"
            category: "Security Incident"
            priority: 1
            assigned_to: "Security Team"
          expected_result: "success"
          expected_fields: ["sys_id", "number"]
        
        - scenario: "incident_retrieval"
          query_params:
            category: "Security Incident"
            state: "Open"
          expected_result: "success"
          expected_fields: ["sys_id", "number", "short_description"]
        
        - scenario: "incident_update"
          update_data:
            state: "Resolved"
            resolution_notes: "Test resolution from integration test"
          expected_result: "success"
    
    microsoft_teams_integration:
      type: "enterprise_api"
      api_type: "teams"
      config: "${external_services.microsoft_teams}"
      test_scenarios:
        - scenario: "message_sending"
          message_data:
            channel: "#security-alerts"
            title: "Test Alert from SecureAI"
            text: "This is a test message from integration testing"
            themeColor: "FF0000"
          expected_result: "success"
        
        - scenario: "adaptive_card_sending"
          card_data:
            type: "AdaptiveCard"
            body:
              - type: "TextBlock"
                text: "Deepfake Detection Alert"
                weight: "Bolder"
              - type: "FactSet"
                facts:
                  - title: "Confidence"
                    value: "95%"
                  - title: "Risk Level"
                    value: "High"
          expected_result: "success"
    
    slack_integration:
      type: "enterprise_api"
      api_type: "slack"
      config: "${external_services.slack}"
      test_scenarios:
        - scenario: "message_sending"
          message_data:
            channel: "#security-alerts"
            text: "Test message from SecureAI integration"
            attachments:
              - color: "danger"
                fields:
                  - title: "Alert Type"
                    value: "Deepfake Detection"
                    short: true
          expected_result: "success"

  end_to_end_workflows:
    complete_security_workflow:
      type: "end_to_end"
      description: "Complete security incident workflow from detection to resolution"
      steps:
        - step: "user_authentication"
          provider: "okta"
          config: "${external_services.okta}"
          test_user: "security_user"
          expected_result: "success"
        
        - step: "video_analysis"
          video_url: "https://test-storage.company.com/videos/deepfake_video.mp4"
          analysis_type: "comprehensive"
          expected_result: "deepfake_detected"
          expected_confidence_min: 0.9
        
        - step: "siem_forwarding"
          siem_type: "splunk"
          config: "${external_services.splunk}"
          event_type: "deepfake_detected"
          expected_result: "success"
        
        - step: "soar_playbook"
          soar_type: "phantom"
          config: "${external_services.phantom}"
          playbook_id: "deepfake_incident_response"
          expected_result: "success"
        
        - step: "incident_creation"
          api_type: "servicenow"
          config: "${external_services.servicenow}"
          incident_category: "Security Incident"
          expected_result: "success"
        
        - step: "teams_notification"
          api_type: "teams"
          config: "${external_services.microsoft_teams}"
          channel: "#security-alerts"
          expected_result: "success"
    
    compliance_workflow:
      type: "end_to_end"
      description: "Compliance officer workflow for audit and reporting"
      steps:
        - step: "user_authentication"
          provider: "active_directory"
          config: "${external_services.active_directory}"
          test_user: "compliance_user"
          expected_result: "success"
        
        - step: "audit_report_generation"
          report_type: "compliance_summary"
          date_range: "last_30_days"
          expected_result: "success"
        
        - step: "data_export"
          export_type: "audit_trail"
          format: "csv"
          expected_result: "success"
        
        - step: "compliance_notification"
          api_type: "teams"
          config: "${external_services.microsoft_teams}"
          channel: "#compliance-alerts"
          expected_result: "success"

# Performance test configurations
performance_tests:
  load_testing:
    concurrent_users: 50
    duration_seconds: 300
    ramp_up_seconds: 60
    target_response_time_ms: 2000
    max_error_rate_percent: 1
  
  stress_testing:
    concurrent_users: 100
    duration_seconds: 600
    ramp_up_seconds: 120
    target_response_time_ms: 5000
    max_error_rate_percent: 5
  
  endurance_testing:
    concurrent_users: 25
    duration_seconds: 3600
    ramp_up_seconds: 30
    target_response_time_ms: 3000
    max_error_rate_percent: 2

# Test execution settings
execution:
  parallel_execution: true
  max_parallel_tests: 5
  test_timeout_seconds: 300
  retry_failed_tests: true
  max_retries: 3
  retry_delay_seconds: 10
  
  # Test data cleanup
  cleanup_after_tests: true
  cleanup_timeout_seconds: 60
  
  # Reporting
  generate_html_report: true
  generate_json_report: true
  generate_junit_report: true
  report_directory: "./test_reports"
  
  # Notifications
  notifications:
    slack_webhook: "https://hooks.slack.com/services/test/webhook"
    email_recipients:
      - "test-team@company.com"
    on_test_completion: true
    on_test_failure: true

# Security and compliance test configurations
security_tests:
  authentication_tests:
    - test_type: "brute_force_protection"
      max_attempts: 5
      lockout_duration_minutes: 15
    
    - test_type: "password_policy_compliance"
      min_length: 8
      require_special_chars: true
      require_numbers: true
    
    - test_type: "session_management"
      session_timeout_minutes: 30
      max_concurrent_sessions: 3
  
  authorization_tests:
    - test_type: "role_based_access_control"
      test_roles: ["admin", "security_professional", "compliance_officer", "content_moderator"]
    
    - test_type: "resource_access_control"
      protected_resources: ["/admin", "/api/v1/admin", "/compliance"]
    
    - test_type: "api_authorization"
      test_endpoints: ["/api/v1/analyze", "/api/v1/reports", "/api/v1/admin"]

# Compliance test configurations
compliance_tests:
  gdpr_compliance:
    - test_type: "data_subject_rights"
      test_scenarios: ["access_request", "rectification_request", "erasure_request", "portability_request"]
    
    - test_type: "consent_management"
      test_scenarios: ["consent_collection", "consent_withdrawal", "consent_verification"]
    
    - test_type: "data_retention"
      retention_periods: ["30_days", "1_year", "7_years"]
  
  ccpa_compliance:
    - test_type: "consumer_rights"
      test_scenarios: ["right_to_know", "right_to_delete", "right_to_opt_out"]
    
    - test_type: "data_categories"
      categories: ["personal_information", "biometric_information", "internet_activity"]
  
  sox_compliance:
    - test_type: "internal_controls"
      test_scenarios: ["access_controls", "change_management", "audit_trails"]
    
    - test_type: "financial_reporting"
      test_scenarios: ["data_integrity", "transaction_logging", "reconciliation"]

# Integration test validation rules
validation_rules:
  siem_integration:
    max_response_time_ms: 5000
    min_event_forward_rate: 0.95
    max_data_loss_percent: 1
  
  soar_integration:
    max_playbook_execution_time_ms: 30000
    min_success_rate: 0.90
    max_retry_attempts: 3
  
  identity_provider:
    max_authentication_time_ms: 3000
    min_success_rate: 0.98
    max_session_creation_time_ms: 5000
  
  enterprise_api:
    max_response_time_ms: 10000
    min_success_rate: 0.95
    max_retry_attempts: 2
