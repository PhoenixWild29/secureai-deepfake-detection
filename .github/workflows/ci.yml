name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Check code formatting with Black
      run: |
        black --check --diff . || echo "Black formatting issues found"
      continue-on-error: true
    
    - name: Check import ordering with isort
      run: |
        isort --check-only --diff . || echo "Import ordering issues found"
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports || echo "Type checking issues found"
      continue-on-error: true
    
    - name: Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll || echo "Security issues found"
      continue-on-error: true
    
    - name: Dependency security check
      run: |
        safety check --json || echo "Dependency vulnerabilities found"
      continue-on-error: true

  # Python Unit Tests
  python-tests:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Python tests
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        else
          echo "No tests directory found, skipping tests"
        fi
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  # Frontend Tests (if applicable)
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f "package.json" ]; then
          npm ci
        else
          echo "No package.json found, skipping frontend tests"
        fi
      continue-on-error: true
    
    - name: Run linting
      run: |
        if [ -f "package.json" ]; then
          npm run lint || echo "Linting issues found"
        fi
      continue-on-error: true
    
    - name: Run tests
      run: |
        if [ -f "package.json" ]; then
          npm test || echo "Tests failed or not configured"
        fi
      continue-on-error: true
    
    - name: Build frontend
      run: |
        if [ -f "package.json" ]; then
          npm run build || echo "Build failed or not configured"
        fi
      continue-on-error: true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: secureai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/secureai_test
        REDIS_URL: redis://localhost:6379
      run: |
        if [ -d "tests/integration" ]; then
          pytest tests/integration/ -v
        else
          echo "No integration tests found"
        fi
      continue-on-error: true

  # Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, python-tests, frontend-tests, integration-tests]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "CI Pipeline Summary:"
        echo "===================="
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Python Tests: ${{ needs.python-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo ""
        
        if [[ "${{ needs.code-quality.result }}" == "success" ]] && \
           [[ "${{ needs.python-tests.result }}" == "success" ]]; then
          echo "✅ Build PASSED - Ready for deployment"
          exit 0
        else
          echo "⚠️ Build completed with warnings - Review required"
          exit 0
        fi
