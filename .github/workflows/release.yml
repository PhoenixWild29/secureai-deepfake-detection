name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "First release - showing all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Changes since $PREVIOUS_TAG"
          CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Save changelog
        echo "$CHANGELOG" > CHANGELOG.txt
        
        # Set output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release Notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # SecureAI DeepFake Detection System - ${{ github.ref_name }}
        
        ## 🎉 What's New
        
        This release includes comprehensive production-ready features:
        
        ### 📚 Documentation
        - Complete user guides for all personas
        - API documentation with examples
        - Administrator and technical guides
        - Troubleshooting and support documentation
        
        ### 🧪 Testing Frameworks
        - User Acceptance Testing (UAT) suite
        - Performance validation tools
        - Security audit framework
        - Blockchain integration testing
        - Enterprise integration tests
        
        ### 🏗️ Deployment Infrastructure
        - Production infrastructure setup
        - CI/CD automation pipelines
        - Disaster recovery procedures
        - One-command deployment scripts
        
        ### 📋 Compliance & Governance
        - GDPR, CCPA, AI Act compliance
        - Regulatory compliance framework
        - Automated compliance assessment
        - Risk assessment tools
        
        ### 🎓 Training & Support
        - Customer onboarding programs
        - Support team training
        - Administrator certification
        - Video tutorial scripts
        - Knowledge base articles
        
        ### 💰 Commercial Materials
        - Pricing model (3 tiers)
        - Licensing agreements
        - Sales enablement materials
        - ROI calculator
        - Interactive pricing calculator
        
        ### 🎧 Support Infrastructure
        - Multi-tier help desk system
        - Escalation procedures
        - SLA tracking
        - Support automation
        
        ## 📝 Changelog
        
        ${{ steps.changelog.outputs.changelog }}
        
        ## 🚀 Installation
        
        ### Quick Start
        ```bash
        git clone https://github.com/${{ github.repository }}.git
        cd secureai-deepfake-detection
        sudo chmod +x quick-deploy.sh
        sudo DOMAIN=your-domain.com ./quick-deploy.sh
        ```
        
        ### Docker Deployment
        ```bash
        docker-compose up -d
        ```
        
        See `DEPLOYMENT_README.md` for complete instructions.
        
        ## 📊 System Requirements
        - Ubuntu 20.04+ or similar Linux
        - 8GB+ RAM (16GB recommended)
        - 4+ CPU cores
        - 100GB+ disk space
        - Python 3.11+
        
        ## 🔗 Documentation
        - [Deployment Guide](COMPLETE_DEPLOYMENT_GUIDE.md)
        - [API Documentation](API_Documentation.md)
        - [User Guides](Training_Materials/)
        - [Administrator Guide](Administrator_Guide.md)
        
        ## 🆘 Support
        - Documentation: See included guides
        - Issues: GitHub Issues
        - Email: support@secureai.com
        
        ## ⚖️ License
        See [Licensing Agreement](Pricing_and_Licensing/Licensing_Agreement.md)
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          DEPLOYMENT_README.md
          DEPLOYMENT_SUMMARY.md
          Quick_Reference_Guide.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build Release Assets
  build-release-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create distribution package
      run: |
        # Create release package
        mkdir -p release-package
        
        # Copy essential files
        cp -r \
          Training_Materials \
          Pricing_and_Licensing \
          Support_Infrastructure \
          *.md \
          requirements.txt \
          docker-compose.yml \
          Dockerfile \
          deploy.sh \
          quick-deploy.sh \
          release-package/ 2>/dev/null || true
        
        # Create tarball
        tar -czf secureai-deepfake-detection-${{ github.ref_name }}.tar.gz release-package/
        
        # Create zip
        zip -r secureai-deepfake-detection-${{ github.ref_name }}.zip release-package/
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          secureai-deepfake-detection-${{ github.ref_name }}.tar.gz
          secureai-deepfake-detection-${{ github.ref_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify stakeholders
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release-assets]
    if: always()
    
    steps:
    - name: Release notification
      run: |
        echo "📢 Release Notification"
        echo "======================"
        echo "Release: ${{ github.ref_name }}"
        echo "Status: ${{ needs.create-release.result }}"
        echo "Assets: ${{ needs.build-release-assets.result }}"
        echo ""
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo ""
        echo "Configure Slack/email notifications here to notify:"
        echo "- Development team"
        echo "- Product team  "
        echo "- Customer success team"
        echo "- Sales team"
    
    # Example: Slack notification (uncomment and configure)
    # - name: Slack Notification
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     text: |
    #       🚀 New SecureAI Release: ${{ github.ref_name }}
    #       📦 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #   if: always()
