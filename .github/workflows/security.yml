name: Security Scanning

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scans weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'

jobs:
  # Dependency Security Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Vulnerabilities found in dependencies"
      continue-on-error: true
    
    - name: Run pip-audit
      run: |
        pip-audit --desc || echo "Audit found issues"
      continue-on-error: true
    
    - name: Upload Safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json
      if: always()

  # Code Security Scanning
  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Bandit
      run: |
        pip install bandit[toml]
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll -i || echo "Security issues found"
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json
      if: always()

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t secureai-deepfake-detection:${{ github.sha }} .
        else
          echo "No Dockerfile found, skipping container scan"
          exit 0
        fi
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'secureai-deepfake-detection:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      continue-on-error: true

  # Secrets Scanning
  secret-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true

  # License Compliance
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install pip-licenses
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        echo "License summary:"
        pip-licenses --summary
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.md

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  # Security Summary
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secret-scan, license-scan]
    if: always()
    
    steps:
    - name: Security scan summary
      run: |
        echo "ðŸ”’ Security Scan Summary"
        echo "======================="
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "Code Security Scan: ${{ needs.code-security-scan.result }}"
        echo "Secrets Scan: ${{ needs.secret-scan.result }}"
        echo "License Scan: ${{ needs.license-scan.result }}"
        echo ""
        echo "Review detailed reports in the Actions artifacts."
    
    - name: Comment on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const summary = `
          ## ðŸ”’ Security Scan Results
          
          | Scan Type | Result |
          |-----------|--------|
          | Dependency Scan | ${{ needs.dependency-scan.result }} |
          | Code Security | ${{ needs.code-security-scan.result }} |
          | Secrets Scan | ${{ needs.secret-scan.result }} |
          | License Compliance | ${{ needs.license-scan.result }} |
          
          âœ… Review detailed reports in the Actions artifacts.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
      continue-on-error: true
